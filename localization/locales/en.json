{
    "main": {
        "startup.version": ">> Current Version:{version} <<",
        "help.aliases": [
            "Help",
            "HELP"
        ],
        "help.description": "Show help messages of command `command`",
        "help.brief": "Show the help list",
        "help.embed.title": "help list",
        "help.embed.footer": "use {command_prefix}help <command name>for more details\npage{page}/{total}page",
        "help.not_found": "Can't found what {user} looking for",
        "help.options.command": "Command that want to search for",
        "help.options.page": "page no. of help list",
        "help.menu.fields": 9,
        "load.aliases": [
            "install"
        ],
        "load.brief": "load extension",
        "load.description": "load `extension` to the bot",
        "load.loaded": "loaded:{extension}",
        "load.error.title": "Missing permission",
        "load.error.description": "This command is only available to the bot owner\nThe owner of this bot is<@{owner}>",
        "unload.aliases": [
            "uninstall"
        ],
        "unload.brief": "unload extension",
        "unload.description": "unload `extension` from the bot",
        "unload.unloaded": "unloaded:{extension}",
        "unload.error.title": "Missing permission",
        "unload.error.description": "This command is only available to the bot owner\nThe owner of this bot is<@{owner}>",
        "reload.aliases": [
            "refresh"
        ],
        "reload.brief": "reload extension",
        "reload.description": "reload `extension` from the bot",
        "reload.reloaded": "reloaded:{extension}",
        "reload.error.title": "Missing permission",
        "reload.error.description": "This command is only available to the bot owner\nThe owner of this bot is<@{owner}>",
        "disconnect.aliases": [
            "disable",
            "shutdown"
        ],
        "disconnect.brief": "shutdown the bot",
        "disconnect.description": "shutdown the bot\nonly available for <@{owner}>",
        "disconnect.disconnected": "The bot is shut",
        "disconnect.error.title": "Missing permission",
        "disconnect.error.description": "This command is only available to the bot owner\nThe owner of this bot is<@{owner}>",
        "status.brief": "debug info",
        "status.aliases": [
            "debug"
        ],
        "status.description": "return current status of the bot for debugging",
        "status.embed.title": "Current status:",
        "status.embed.field.ping": "current ping",
        "status.embed.field.perms": "bot permissions",
        "status.embed.field.exts": "loaded extensions",
        "status.embed.uptime": "online time",
        "status.error.title": "Missing permission",
        "status.error.description": "this command is only available for bot owner\nThe bot owner is <@{owner}>",
        "sponsor.aliases": [
            "patreon",
            "support",
            "donate"
        ],
        "sponsor.description": "support the dev",
        "sponsor.embed.title": "Donation",
        "sponsor.embed.description": "Support lonnstyle to develop the bot",
        "documentation.aliases": [
            "doc",
            "rtfd"
        ],
        "documentation.description": "Documentation",
        "documentation.embed.title": "Docs",
        "documentation.embed.description": "empowered by readthedocs",
        "documentation.embed.url": "https://discordbotextension.readthedocs.io/en/latest/"
    },
    "admin": {
        "clear.aliases": [
            "clean",
            "delete"
        ],
        "clear.brief": "clear history messages",
        "clear.description": "clear [amount]\nclear specific amount of history messages",
        "clear.cleared": "deleted {num} messages at <<{channel}>> channel with command clear",
        "clear.error.title": "Missing permission",
        "clear.error.description": "this command is only available for bot owner\nThe bot owner is <@{owner}>"
    },
    "baro": {
        "rawDict.URL": "https://raw.githubusercontent.com/pa001024/riven-mirror/dev/src/i18n/lang/en.json",
        "baro.aliases": [
            "VoidTrader",
            "Baro"
        ],
        "baro.brief": "Baro's info",
        "baro.description": "Current status of Void Trader Baro Ki'Teer\tIf Baro is already at the relay, it will shows the item list",
        "baro.item": "Item:{name}\nDucats:{ducats}\tCredits:{credits}\n",
        "baro.arrived": "Baro Ki'Teer had arrived {location},will stay until <t:{stay}:R>\tBeing as follow:",
        "baro.arrival": "Baro Ki'Teer will arrive {location} at <t:{arrive}:R>"
    },
    "common": {
        "ping.aliases": [
            "delay",
            "latency"
        ],
        "ping.brief": "show latency",
        "ping.description": "Shows the current latency of bot's connection",
        "ping.embed.title": "Current latency is",
        "ping.latency": "{latency}ms",
        "sayd.aliases": [],
        "sayd.brief": "repeat message",
        "sayd.description": "let the bot to send `msg` as embed message",
        "poll.aliases": [],
        "poll.brief": "start a poll",
        "poll.description": "let the bot to start a poll",
        "poll.error.title": "Error message",
        "poll.error.description.same": "The two option are same",
        "poll.error.description.emoji": "Please ensure that it is an emoji",
        "poll.options.topic": "poll options",
        "poll.options.option1": "option1",
        "poll.options.option2": "option2",
        "poll.options.emoji1": "emoji for option1",
        "poll.options.emoji2": "emoji for option2"
    },
    "event": {
        "role.aliases": [],
        "role.brief": "add role for reaction role",
        "role.description": "add role available for self reaction role",
        "role.error.title": "Error",
        "role.error.description": "please check content",
        "role.options.role": "name of the role for reaction role",
        "role.options.emoji": "emoji for reaction role",
        "reactionRole.aliases": [
            "rr"
        ],
        "reactionRole.brief": "appoint the message for reaction role",
        "reactionRole.description": "appoint the message for listening reaction role updates",
        "reactionRole.options.message": "the message ID of the reaction role message",
        "onMessage.say": "said:"
    },
    "logup": {
        "reloadlog.reloaded": "reloaded"
    },
    "rivenPrice": {
        "api.header": {
            "Language": "en"
        },
        "riven.aliases": [],
        "riven.brief": "search for riven price",
        "riven.description": "search for `weapon` riven price",
        "riven.error.title": "Error!",
        "riven.error.description": "Result...{self} have an error occurs...API error!",
        "riven.message.title": "The following are search result of {userInput} riven(ascending order)\n",
        "riven.message.rivenName": "```\nRiven name:{userInput} {rivenName}\n",
        "riven.message.owner": "Owner:{ownerName}\n",
        "riven.message.rank": "Rank:{rank}\n",
        "riven.message.reroll": "Rerolls:{rerolls}\n",
        "riven.embed.title": "Riven name:{userInput} {rivenName}",
        "riven.embed.description": "rank:{rank}    rerolls:{rerolls}",
        "riven.link.language": "en",
        "riven.message.topbid": "Current bid:{top_bid}\n",
        "riven.embed.field.topbid": "Current bid:",
        "riven.message.price": "Price:{buyout_price}\n",
        "riven.embed.field.price": "Price:",
        "riven.message.starting": "Starting price:{starting_price}\n",
        "riven.message.buyout": "Buyout price:{buyout_price}\n",
        "riven.embed.field.starting": "Starting price:",
        "riven.embed.field.buyout": "Buyout price",
        "riven.message.attr.pos": "Positive attributes:{attribute} {value}\n",
        "riven.message.attr.neg": "Negative attributes:{attribute} {value}\n",
        "riven.embed.attr.pos": "Positive attributes:",
        "riven.embed.attr.neg": "Negative attributes:"
    },
    "wfm": {
        "api.header": {
            "Language": "en"
        },
        "local_order_type": {
            "buy": "buy",
            "sell": "sell"
        },
        "price_order": {
            "buy": "lowest",
            "sell": "highest"
        },
        "translate.aliases": [
            "trans"
        ],
        "translate.brief": "translate",
        "translate.description": "translate `item` name on [wf.m](https://warframe.market)",
        "translate.error.notFound": "{self}couldn't found what {user} looking for",
        "translate.language.en": "English",
        "translate.language.local": "English",
        "translate.error.noTrans": "{self} don't really know what's the translation",
        "translate.translate.message": "`{item}`'s {language} translation is `{translate}`",
        "translate.options.item": "Targeted item",
        "wfm.aliases": [
            "wm"
        ],
        "wfm.brief": "search for item price",
        "wfm.description": "check `args` price on [wf.m](https://warframe.market)\n`args` accepts the following arguments:\n`type` listing type,`item`(required),`rank`",
        "wfm.buy": "Buy",
        "wfm.sell": "Sell",
        "wfm.error.unknownOrder": "{user} is looking for buy or sell orders?",
        "wfm.error.tooManyArgs": "{user} said too much, {self} don't really understand that",
        "wfm.error.unknownItem": "{self} don't really know what do operator mean",
        "wfm.error.outOfRank": "{user}'s input overed the item's maximum level 0.0",
        "wfm.error.API": "{self}thought...{user} might got something wrong",
        "wfm.ducats": "Ducats:{ducats}",
        "wfm.message.title": "5 {order} price listing of {items}:\n",
        "wfm.embed.title": "Item:{itemName}\tQuantity:{quantity}\t{localRank}\nTax:{tax}\t{ducats}",
        "wfm.embed.description": "Price:{platinum}",
        "wfm.embed.field.cpMsg": "clipboard",
        "wfm.link.language": "en",
        "wfm.rank": "Rank:{rank}",
        "wfm.message.item": "```Player:{user}\nItem:{itemName}\tQuantity:{quantity}\t{localRank}\nPrice:{platinum}\nTax:{tax}\t{ducats}\n",
        "wfm.message.cpMsg": "blipboard\n",
        "wfm.options.item": "Targeted item"
    },
    "wiki": {
        "update_wiki.brief": "update wiki pages list",
        "update_wiki.description": "update `wiki` language wiki's local cached page list\ninput `all` for updating all wikis",
        "update_wiki.options.wiki": "targeted wiki",
        "update_wiki.options.zh": "Simplified Chinese",
        "update_wiki.options.tc": "Traditional Chinese",
        "update_wiki.options.en": "English",
        "update_wiki.options.all": "All",
        "wiki.aliases": [],
        "wiki.brief": "search for wiki page",
        "wiki.description": "search wiki page with title `page`",
        "wiki.footer.huiji": "Huiji",
        "wiki.footer.tc": "Traditional Chinese",
        "wiki.footer.en": "English",
        "wiki.error.notFound": "{self} couldn't found the page that {user} want",
        "wiki.options.page": "targeted wiki page"
    },
    "worldState": {
        "poe.aliases": [
            "poe"
        ],
        "poe.brief": "current plain's time",
        "poe.description": "Get current plains of eidolon cycle and remaining time",
        "poe.embed.description.day": "POE night will start at <t:{expiry}:t>\nETA:",
        "poe.embed.title.day": "POE-morning☀️",
        "poe.embed.description.night": "POE morning will start at <t:{expiry}:t>\nETA:",
        "poe.embed.title.night": "POE-night️🌙",
        "earth.aliases": [],
        "earth.brief": "current Earth time",
        "earth.description": "Get current Earth cycle and remaining time",
        "earth.embed.description.day": "Earth night will start at <t:{expiry}:t>\nETA:",
        "earth.embed.title.day": "Earth-morning☀️",
        "earth.embed.description.night": "Earth morning will start at<t:{expiry}:t>\nETA:",
        "earth.embed.title.night": "Earth-night️🌙",
        "cambion.aliases": [],
        "cambion.brief": "current Cambion Drift time",
        "cambion.description": "Get current Cambion Drift cycle and remaining time",
        "cambion.embed.description.fass": "Cambion Drift Vome will start at <T:{expiry}:t>\nETA:",
        "cambion.embed.title.fass": "current Cambion Fass",
        "cambion.embed.description.vome": "current Cambion Fass will start at <t:{expiry}:t>\nETA:",
        "cambion.embed.title.vome": "current Cambion Vome",
        "orb.aliases": [
            "orb"
        ],
        "orb.brief": "current Orb Vallis time",
        "orb.description": "Get current Orb Vallis cycle and remaining time",
        "orb.embed.description.cold": "Orb Vallis warm will start at <t:{expiry}:t>\nETA:",
        "orb.embed.title.cold": "Orb Vallis cold",
        "orb.embed.description.warm": "Orb Vallis cold will start at <t:{expiry}:t>\nETA:",
        "orb.embed.title.warm": "Orb Vallis warm",
        "arbitration.aliases": [],
        "arbitration.brief": "current Arbitration mission",
        "arbitration.description": "Get current Arbitration mission and remaining time\n**As the API is not stable, returning data might not be accurate**",
        "arbitration.embed.title": "Arbitration",
        "arbitration.embed.description": "Mission:{type}",
        "arbitration.embed.field.name": "Node:{node}",
        "arbitration.embed.field.value": "Enemy:{enemy}\nRemaining time: <t:{expiry}:R>",
        "sortie.aliases": [
            "sortie"
        ],
        "sortie.brief": "current sortie mission",
        "sortie.description": "Get current sortie mission and remaining time",
        "sortie.embed.title": "Sortie remaining time:<t:{expiry}:R>",
        "sortie.embed.description": "Boss:{boss},Faction:{faction}",
        "sortie.embed.field.name": "Sortie{count}:\nNode:{node} level{lower}-{upper}",
        "sortie.embed.field.value": "Mission:{missionType}\nModifier:{modifier}",
        "fissure.aliases": [
            "relic"
        ],
        "fissure.brief": "void fissure missions",
        "fissure.description": "Get current fissure missions and remaining time",
        "fissure.embed.title": "Void fissure",
        "fissure.embed.description": "Current void fissures",
        "fissure.embed.field": "Tier:{tier}\nMission:{missionType}\nETA:<t:{expiry}:R>",
        "fissure.tierList": {
            "1": "Lith",
            "2": "Meso",
            "3": "Neo",
            "4": "Axi",
            "5": "Requiem"
        },
        "fissure.planets": {
            "Mercury": "Mercury",
            "Venus": "Venus",
            "Earth": "Earth",
            "Mars": "Mars",
            "Phobos": "Phobos",
            "Deimos": "Deimos",
            "Ceres": "Ceres",
            "Jupiter": "Jupiter",
            "Europa": "Europa",
            "Saturn": "Saturn",
            "Uranus": "Uranus",
            "Neptune": "Neptune",
            "Pluto": "Pluto",
            "Sedna": "Sedna",
            "Eris": "Eris",
            "Void": "Void",
            "Lua": "Lua",
            "Kuva Fortress": "Kuva Fortress",
            "Veil": "Veil"
        },
        "fissure.missionType": {
            "Assault": "Assault",
            "Capture": "Capture",
            "Defense": "Defense",
            "Disruption": "Disruption",
            "Excavation": "Excavation",
            "Extermination": "Extermination",
            "Hive": "Hive",
            "Interception": "Interception",
            "Mobile Defense": "Mobile Defense",
            "Rescue": "Rescue",
            "Sabotage": "Sabotage",
            "Spy": "Spy",
            "Survival": "Survival",
            "Skirmish": "Skirmish",
            "Volatile": "Volatile"
        },
        "fissure.proxima": " Proxima",
        "fissure.tierOption": {
            "t1": 1,
            "t2": 2,
            "t3": 3,
            "t4": 4,
            "t5": 5,
            "lith": 1,
            "meso": 2,
            "neo": 3,
            "axi": 4,
            "requiem": 5
        }
    }
}